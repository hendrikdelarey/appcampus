using AppCampus.Domain.Models.Enums;
using AppCampus.Domain.Models.Events;
using AppCampus.Domain.Models.Identity;
using AppCampus.PortalApi.Extensions;
using AppCampus.PortalApi.Filters;
using AppCampus.PortalApi.Models.EditModels;
using AppCampus.PortalApi.Models.InputModels;
using AppCampus.PortalApi.Models.ResponseModels;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.Owin.Security.DataProtection;
using System;
using System.Linq;
using System.Web.Http;
using System.Web.Http.Description;
using System.Web.Security;
using Drumble.DomainDrivenArchitecture.Events;

namespace AppCampus.PortalApi.Controllers
{
    [RoutePrefix("api/v1/companies/{companyId:companyId}/users")]
    [AuthoriseCompany]
    public class UsersController : CustomApiController
    {
        protected UserManager<ApplicationUser, Guid> UserManager { get; private set; }

        protected RoleManager<ApplicationRole, Guid> RoleManager { get; private set; }

        public UsersController(IUserStore<ApplicationUser, Guid> userStore, IRoleStore<ApplicationRole, Guid> roleStore)
        {
            UserManager = new UserManager<ApplicationUser, Guid>(userStore);
            RoleManager = new RoleManager<ApplicationRole, Guid>(roleStore);
        }

        /// <summary>
        /// Retrieves a company's user.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <param name="userId">The identifier of the user.</param>
        /// <returns>The user model.</returns>
        [Route("{userId:Guid}", Name = "GetUser")]
        [ResponseType(typeof(UserModel))]
        public IHttpActionResult Get(Guid companyId, Guid userId)
        {
            var user = UserManager.FindById(userId);

            if (user == null || user.CompanyId != companyId)
            {
                return NotFound();
            }

            var response = UserModel.From(user);

            return Ok(response);
        }

        /// <summary>
        /// Lists all of a company's users.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <returns>A list of user models.</returns>
        [Route]
        [ResponseType(typeof(UserModel))]
        public IHttpActionResult Get(Guid companyId)
        {
            var users = UserManager.Users.Where(u => u.CompanyId == companyId);

            var response = users.Select(x => UserModel.From(x));

            return Ok(response);
        }

        /// <summary>
        /// Updates a user.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <param name="userId">The identifier of the user.</param>
        /// <param name="userModel">The user input model.</param>
        [Route("{userId:Guid}")]
        public IHttpActionResult Put(Guid companyId, Guid userId, UserEditModel userModel)
        {
            var user = UserManager.FindById(userId);

            if (user == null || user.CompanyId != companyId)
            {
                return NotFound();
            }

            user.FirstName = userModel.FirstName;
            user.LastName = userModel.LastName;

            UserManager.Update(user);

            return NoContent();
        }

        /// <summary>
        /// Creates a user with autogenerated password.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <param name="userModel">The user input mode.</param>
        /// <returns>The created user.</returns>
        [Route]
        [AuthoriseRoles(RoleClassification.Administrator)]
        [ResponseType(typeof(UserModel))]
        public IHttpActionResult Post(Guid companyId, UserInputModel userModel)
        {
            var user = new ApplicationUser(companyId, userModel.Username, userModel.FirstName, userModel.LastName);

            var randomPassword = Membership.GeneratePassword(7, 0);

            IdentityResult result = UserManager.Create(user, randomPassword);

            if (result.Succeeded)
            {
                DomainEvents.Raise<UserCreated>(new UserCreated(user.UserName, user.FirstName, user.LastName, randomPassword));
            }

            IHttpActionResult errorResult = GetErrorResult(result);

            if (errorResult != null)
            {
                return errorResult;
            }

#if DEBUG
            var response = UserModel.From(user, randomPassword);
#else
                var response = UserModel.From(user);
#endif

            return Created(new Uri(Url.Link("GetUser", new { CompanyId = companyId, UserId = user.Id })), response);
        }

        /// <summary>
        /// Retrieves a user's specific role.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <param name="userId">The identifier of the user.</param>
        /// <param name="roleId">The identifier of the role.</param>
        /// <returns>The user role model.</returns>
        [Route("{userId:Guid}/roles/{roleId:Guid}", Name = "GetUserRole")]
        [AuthoriseRoles(RoleClassification.Administrator)]
        [ResponseType(typeof(UserRoleModel))]
        public IHttpActionResult GetRole(Guid companyId, Guid userId, Guid roleId)
        {
            var user = UserManager.FindById(userId);

            if (user == null || user.CompanyId != companyId)
            {
                return NotFound();
            }

            var role = RoleManager.FindById(roleId);

            var hasRole = UserManager.IsInRole(userId, role.Name);

            if (hasRole)
            {
                return Ok(UserRoleModel.From(role));
            }
            else
            {
                return NotFound();
            }
        }

        /// <summary>
        /// Retrieves a user's roles.
        /// </summary>
        /// <param name="companyId">The identifier of the company.</param>
        /// <param name="userId">The identifier of the user.</param>
        /// <returns>A list of user role models.</returns>
        [Route("{userId:Guid}/roles")]
        [OverrideAuthorization]
        [AuthoriseRoles(RoleClassification.Administrator)]
        [ResponseType(typeof(UserRoleModel))]
        public IHttpActionResult GetRoles(Guid companyId, Guid userId)
        {
            var user = UserManager.FindById(userId);

            if (user == null || user.CompanyId != companyId)
            {
                return NotFound();
            }

            var roleNames = UserManager.GetRoles(userId).ToList();
            var roles = roleNames.Select(x => RoleManager.FindByName(x)).ToList();

            var response = roles.Select(x => UserRoleModel.From(x));

            return Ok(response);
        }

        /// <summary>
        /// Assign a role to a user.
        /// </summary>
        /// <param name="roleModel">The authorisation role.</param>
        /// <param name="userId">The identifier of the user.</param>
        /// <returns>A list of user role models.</returns>
        [Route("{userId:Guid}/roles")]
        [AuthoriseRoles(RoleClassification.Administrator)]
        [ResponseType(typeof(UserRoleModel))]
        public IHttpActionResult PostRole(Guid userId, UserRoleInputModel roleModel)
        {
            var user = UserManager.FindById(userId);

            if (user == null)
            {
                return NotFound();
            }

            var role = RoleManager.FindById(roleModel.RoleId);
            var identityResult = UserManager.AddToRole(userId, role.Name);

            IHttpActionResult errorResult = GetErrorResult(identityResult);

            if (errorResult != null)
            {
                return errorResult;
            }

            return Created(new Uri(Url.Link("GetUserRole", new { companyId = user.CompanyId, userId = user.Id, roleId = roleModel.RoleId })), UserRoleModel.From(role));
        }

        /// <summary>
        /// Unassigns a role from a user.
        /// </summary>
        /// <param name="userId">The identifier of the user.</param>
        /// <param name="roleId">The identifier of the role.</param>
        /// <returns>A list of user role models.</returns>
        [Route("{userId:Guid}/roles/{roleId:Guid}")]
        [AuthoriseRoles(RoleClassification.Administrator)]
        [ResponseType(typeof(UserRoleModel))]
        public IHttpActionResult DeleteRole(Guid userId, Guid roleId)
        {
            var user = UserManager.FindById(userId);

            if (user == null)
            {
                return NotFound();
            }

            var role = RoleManager.FindById(roleId);

            var identityResult = UserManager.RemoveFromRole(user.Id, role.Name);

            IHttpActionResult errorResult = GetErrorResult(identityResult);

            if (errorResult != null)
            {
                return errorResult;
            }

            return Ok();
        }

        /// <summary>
        /// Change the user's password.
        /// </summary>
        /// <param name="userId">The identifier of the user.</param>
        /// <param name="model">The password input model.</param>
        /// <returns></returns>

        [Route("{userId:Guid}/password")]
        [OverrideAuthorization]
        [AuthoriseUser]
        public IHttpActionResult PutPassword(Guid userId, PasswordInputModel model)
        {
            var user = UserManager.FindById(userId);

            if (user == null)
            {
                return NotFound();
            }

            IdentityResult identityResult = UserManager.ChangePassword(user.Id, model.CurrentPassword, model.Password);

            IHttpActionResult errorResult = GetErrorResult(identityResult);

            if (errorResult != null)
            {
                return errorResult;
            }

            return Ok();
        }

        /// <summary>
        /// Reset the user's password.
        /// </summary>
        /// <param name="userId">The identifier of the user.</param>
        /// <returns></returns>
        [Route("{userId:Guid}/password")]
        [AuthoriseRoles(RoleClassification.Administrator)]
        public IHttpActionResult PostPassword(Guid userId)
        {
            var user = UserManager.FindById(userId);

            if (user == null)
            {
                return NotFound();
            }

            var provider = new DpapiDataProtectionProvider("AppCampus");
            var randomPassword = Membership.GeneratePassword(7, 0);

            UserManager.UserTokenProvider = new DataProtectorTokenProvider<ApplicationUser, Guid>(provider.Create("PasswordAdminReset"));
            var resetToken = UserManager.GeneratePasswordResetToken(user.Id);

            var identityResult = UserManager.ResetPassword(user.Id, resetToken, randomPassword);

            if (identityResult.Succeeded)
            {
                DomainEvents.Raise<PasswordChanged>(new PasswordChanged(user.UserName, user.FirstName, user.LastName, randomPassword));
            }

            IHttpActionResult errorResult = GetErrorResult(identityResult);

            if (errorResult != null)
            {
                return errorResult;
            }

            // This is temporary. Do not return the password!!
            return Ok(ErrorModel.From(randomPassword));
        }

        private IHttpActionResult GetErrorResult(IdentityResult result)
        {
            if (result == null)
            {
                return InternalServerError();
            }

            if (!result.Succeeded)
            {
                if (result.Errors != null)
                {
                    foreach (string error in result.Errors)
                    {
                        ModelState.AddModelError("", error);
                    }
                }

                if (ModelState.IsValid)
                {
                    // No ModelState errors are available to send, so just return an empty BadRequest.
                    return BadRequest();
                }

                return BadRequest(ModelState);
            }

            return null;
        }
    }
}